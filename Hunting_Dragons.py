import requests
import random
import json
from PIL import Image, ImageDraw, ImageFont
# ======================= Telegram =======================
TOKEN = "7718445747:AAEwC-RX2lRfjevCPK1TAgkR3EeY3r0EsWk"
URL = f"https://api.telegram.org/bot{TOKEN}/"
offset = 0

def get_updates():
    global offset
    r = requests.get(URL + "getUpdates", params={"timeout": 100, "offset": offset})
    return r.json()

def send_message(chat_id, text, reply_markup=None):
    data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(URL + "sendMessage", data=data)

def log(chat_id, text):
    print(text)
    send_message(chat_id, text)

# ======================= –ë–û–ï–í–ê–Ø –õ–û–ì–ò–ö–ê =======================
class Character:
    def __init__(self, name, hp, attack=0, defense=0, speed=10, mag_defense=0):
        self.name = name
        self.hp = hp
        self.attack = attack
        self.defense = defense
        self.mag_defense = mag_defense
        self.speed = speed

    def is_alive(self):
        return self.hp > 0

    def take_damage(self, damage, mag=False):
        if mag:
            real = max(0, damage - self.mag_defense)
        else:
            real = max(0, damage - self.defense)
        self.hp -= real
        print(f'{self.name} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω {real}. HP –æ—Å—Ç–∞–ª–æ—Å—å: {self.hp}')
        return real

# ------------------- –ì–µ—Ä–æ–∏ -------------------
class HeroMag(Character):
    def __init__(self, name='–ú–∞–≥'):
        super().__init__(name, hp=70, speed=24, mag_defense=50)
        self.mag_damage = random.randint(25, 35)
        self.mana = 100

    def skill_attack(self, target, chat_id):
        dmg = self.mag_damage
        dealt = target.take_damage(dmg, mag=True)
        log(chat_id, f'üîÆ {self.name} –±—å—ë—Ç {target.name} –º–∞–≥–∏–µ–π –Ω–∞ {dealt}. HP {target.name}: {target.hp}')

    def skill_super_attack(self, target, chat_id):
        if self.mana >= 30:
            dmg = self.mag_damage * 2
            self.mana -= 30
            dealt = target.take_damage(dmg, mag=True)
            log(chat_id, f'üí• {self.name} –°–£–ü–ï–†-—É–¥–∞—Ä –ø–æ {target.name} –Ω–∞ {dealt}! –ú–∞–Ω–∞: {self.mana}. HP —Ü–µ–ª–∏: {target.hp}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞–Ω—ã!')

    def skill_heal_one(self, ally, chat_id):
        if self.mana >= 20:
            heal = random.randint(20, 35)
            self.mana -= 20
            ally.hp += heal
            log(chat_id, f'‚ú® {self.name} –ª–µ—á–∏—Ç {ally.name} –Ω–∞ {heal}. –ú–∞–Ω–∞: {self.mana}. HP {ally.name}: {ally.hp}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞–Ω—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è!')

    def skill_heal_all(self, allies, chat_id):
        if self.mana >= 40:
            heal = random.randint(10, 20)
            self.mana -= 40
            for a in allies:
                a.hp += heal
            log(chat_id, f'üåü {self.name} –ª–µ—á–∏—Ç –≤—Å–µ—Ö –Ω–∞ {heal}. –ú–∞–Ω–∞: {self.mana}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞–Ω—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ª–µ—á–µ–Ω–∏—è!')

class HeroTank(Character):
    def __init__(self, name='–¢–∞–Ω–∫'):
        super().__init__(name, hp=100, attack=random.randint(13,20), speed=22, defense=50)
        self.rage = 30
        self.agro = False

    def skill_attack(self, target, chat_id):
        dmg = self.attack
        dealt = target.take_damage(dmg)
        self.rage += 10
        log(chat_id, f'üó°Ô∏è {self.name} –∞—Ç–∞–∫—É–µ—Ç {target.name} –Ω–∞ {dealt}. –Ø—Ä–æ—Å—Ç—å: {self.rage}. HP —Ü–µ–ª–∏: {target.hp}')

    def skill_shield_bash(self, target, chat_id):
        if self.rage >= 50:
            dmg = self.attack + random.randint(15,25)
            self.rage -= 50
            dealt = target.take_damage(dmg)
            log(chat_id, f'üõ°Ô∏è {self.name} –£–î–ê–† –©–ò–¢–û–ú –ø–æ {target.name} –Ω–∞ {dealt}. –Ø—Ä–æ—Å—Ç—å: {self.rage}. HP —Ü–µ–ª–∏: {target.hp}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —è—Ä–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞—Ä–∞ —â–∏—Ç–æ–º!')

    def skill_defense_buff(self, ally, chat_id):
        if self.rage >= 20:
            buff = 20
            self.rage -= 20
            ally.defense += buff
            log(chat_id, f'üõ°Ô∏è {self.name} —É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É {ally.name} –Ω–∞ {buff}. –ó–∞—â–∏—Ç–∞ {ally.name}: {ally.defense}. –Ø—Ä–æ—Å—Ç—å: {self.rage}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —è—Ä–æ—Å—Ç–∏!')

    def skill_provoke(self, dragon, chat_id):
        if self.rage >= 20:
            self.rage -= 20
            self.agro = True
            log(chat_id, f'üéØ {self.name} –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—Ç {dragon.name}. –Ø—Ä–æ—Å—Ç—å: {self.rage}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —è—Ä–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏!')

class HeroHunter(Character):
    def __init__(self, name='–û—Ö–æ—Ç–Ω–∏–∫'):
        super().__init__(name, hp=80, attack=random.randint(20,30), speed=30, defense=15, mag_defense=15)
        self.stamina = 50

    def skill_attack(self, target, chat_id):
        dmg = self.attack
        dealt = target.take_damage(dmg)
        self.stamina += 10
        log(chat_id, f'üèπ {self.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {target.name} –Ω–∞ {dealt}. –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}. HP —Ü–µ–ª–∏: {target.hp}')

    def skill_super_shot(self, target, chat_id):
        if self.stamina >= 30:
            dmg = self.attack + random.randint(15,25)
            self.stamina -= 30
            dealt = target.take_damage(dmg)
            log(chat_id, f'üî• {self.name} –°–£–ü–ï–†-–≤—ã—Å—Ç—Ä–µ–ª –≤ {target.name} –Ω–∞ {dealt}. –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}. HP —Ü–µ–ª–∏: {target.hp}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏!')

    def skill_speed_buff(self, ally, chat_id):
        if self.stamina >= 20:
            buff = 10
            self.stamina -= 20
            ally.speed += buff
            log(chat_id, f'‚ö° {self.name} —É—Å–∫–æ—Ä—è–µ—Ç {ally.name} –Ω–∞ {buff}. –°–∫–æ—Ä–æ—Å—Ç—å {ally.name}: {ally.speed}. –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –¥–ª—è –±–∞—Ñ–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏!')

    def skill_multi_shot(self, targets, chat_id):
        if self.stamina >= 40:
            self.stamina -= 40
            log(chat_id, f'üå™ {self.name} –≥—Ä–∞–¥ —Å—Ç—Ä–µ–ª!')
            for t in targets:
                if t.is_alive():
                    dealt = t.take_damage(self.attack // 2)
                    log(chat_id, f' ‚Üí –ø–æ {t.name}: {dealt} —É—Ä–æ–Ω–∞. HP: {t.hp}')
            log(chat_id, f'–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}')
        else:
            log(chat_id, '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –¥–ª—è –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞!')

# ------------------- –î—Ä–∞–∫–æ–Ω -------------------
class Dragon(Character):
    def __init__(self, name='–î—Ä–∞–∫–æ–Ω'):
        super().__init__(name, hp=500, attack=random.randint(15,25), speed=20, defense=20, mag_defense=20)
        self.speed_buff_turns = 0
        self.minion = None

    def skill_attack(self, target, chat_id):
        dmg = max(0, self.attack - target.defense//2)
        dealt = target.take_damage(dmg)
        log(chat_id, f'üê≤ {self.name} –∞—Ç–∞–∫—É–µ—Ç {target.name} –Ω–∞ {dealt}. HP {target.name}: {target.hp}')

    def skill_attack_all(self, targets, chat_id):
        dmg = self.attack // 2
        log(chat_id, f'üê≤ {self.name} –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞!')
        for t in targets:
            if t.is_alive():
                dealt = t.take_damage(dmg)
                log(chat_id, f' ‚Üí –ø–æ {t.name}: {dealt}. HP: {t.hp}')

    def skill_magic(self, target, chat_id):
        dmg = random.randint(20,35)
        dealt = target.take_damage(dmg, mag=True)
        log(chat_id, f'üê≤ {self.name} –º–∞–≥–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –ø–æ {target.name} –Ω–∞ {dealt}. HP {target.name}: {target.hp}')

    def skill_magic_all(self, targets, chat_id):
        dmg = random.randint(15,25)
        log(chat_id, f'üê≤ {self.name} –º–∞–≥–∏—á–µ—Å–∫–∏–π –¥–æ–∂–¥—å!')
        for t in targets:
            if t.is_alive():
                dealt = t.take_damage(dmg, mag=True)
                log(chat_id, f' ‚Üí –ø–æ {t.name}: {dealt}. HP: {t.hp}')

    def skill_speed_buff(self, chat_id):
        self.speed += 10
        self.speed_buff_turns = 2
        log(chat_id, f'üê≤ {self.name} —É—Å–∫–æ—Ä—è–µ—Ç—Å—è! –°–∫–æ—Ä–æ—Å—Ç—å {self.speed} –Ω–∞ 2 —Ö–æ–¥–∞')

    def skill_summon_minion(self, chat_id):
        if not self.minion or not self.minion.is_alive():
            self.minion = DragonMinion(self)
            log(chat_id, f'üê≤ {self.name} –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–ª—É–∂–Ω–∏–∫–∞!')

    def choose_action(self, heroes, chat_id):
        actions = [
            lambda: self.skill_attack(random.choice([h for h in heroes if h.is_alive()]), chat_id),
            lambda: self.skill_attack_all(heroes, chat_id),
            lambda: self.skill_magic(random.choice([h for h in heroes if h.is_alive()]), chat_id),
            lambda: self.skill_magic_all(heroes, chat_id),
            lambda: self.skill_speed_buff(chat_id),
            lambda: self.skill_summon_minion(chat_id),
        ]
        random.choice(actions)()

        if self.speed_buff_turns > 0:
            self.speed_buff_turns -= 1
            if self.speed_buff_turns == 0:
                self.speed -= 10
                log(chat_id, f'üê≤ {self.name} —Ç–µ—Ä—è–µ—Ç –±–∞—Ñ —Å–∫–æ—Ä–æ—Å—Ç–∏.')

        if self.minion and self.minion.is_alive():
            self.minion.choose_action(heroes, chat_id)

class DragonMinion(Character):
    def __init__(self, dragon, name='–ü—Ä–∏—Å–ª—É–∂–Ω–∏–∫'):
        super().__init__(name, hp=50, attack=10, speed=15, defense=5, mag_defense=5)
        self.dragon = dragon

    def heal_dragon(self, chat_id):
        heal = random.randint(20,40)
        self.dragon.hp += heal
        log(chat_id, f'üß™ {self.name} –ª–µ—á–∏—Ç {self.dragon.name} –Ω–∞ {heal}. HP –¥—Ä–∞–∫–æ–Ω–∞: {self.dragon.hp}')

    def attack_hero(self, heroes, chat_id):
        target = random.choice([h for h in heroes if h.is_alive()])
        dmg = 10
        dealt = target.take_damage(dmg)
        log(chat_id, f'üó°Ô∏è {self.name} –±—å—ë—Ç {target.name} –Ω–∞ {dealt}. HP {target.name}: {target.hp}')

    def choose_action(self, heroes, chat_id):
        random.choice([
            lambda: self.heal_dragon(chat_id),
            lambda: self.attack_hero(heroes, chat_id)
        ])()

#  STATE + UI
game_state = {
    "heroes": [],
    "dragon": None,
    "turn_order": [],
    "current_turn": 0,
    "in_battle": False,
}

def show_main_menu(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "callback_data": "start_game"}],
            [{"text": "üìñ –ü—Ä–∞–≤–∏–ª–∞", "callback_data": "rules"}],
            [{"text": "‚ùå –í—ã–π—Ç–∏", "callback_data": "exit"}]
        ]
    }
    send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!", keyboard)

def start_game(chat_id):
    mag = HeroMag()
    tank = HeroTank()
    hunter = HeroHunter()
    dragon = Dragon()

    game_state["heroes"] = [mag, tank, hunter]
    game_state["dragon"] = dragon

    all_units = [dragon] + game_state["heroes"]
    game_state["turn_order"] = sorted(all_units, key=lambda x: x.speed, reverse=True)
    game_state["current_turn"] = 0
    game_state["in_battle"] = True

    send_message(chat_id, "‚öî –ë–æ–π –Ω–∞—á–∞–ª—Å—è! –ù–∞ –ø–æ–ª–µ ‚Äî –î—Ä–∞–∫–æ–Ω –∏ –ì–µ—Ä–æ–∏!")
    next_turn(chat_id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
def send_photo(chat_id, photo_path, caption=""):
    files = {"photo": open(photo_path, "rb")}
    data = {"chat_id": chat_id, "caption": caption, "parse_mode": "HTML"}
    requests.post(URL + "sendPhoto", data=data, files=files)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏-–∫–∞—Ä—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
def draw_battle_map(chat_id):
    width, height = 400, 200
    img = Image.new("RGB", (width, height), color=(50, 50, 50))
    draw = ImageDraw.Draw(img)
    font = ImageFont.load_default()

    dragon = game_state["dragon"]
    heroes = game_state["heroes"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ø—Ä–∏–º–µ—Ä: png 50x50)
    dragon_img = Image.open("dragon.png").resize((50,50))
    img.paste(dragon_img, (10, 75), dragon_img)

   #

    img.save("battle_map.png")
    send_photo(chat_id, "battle_map.png", caption="üó∫Ô∏è –ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞ –±–æ—è")


def next_turn(chat_id):
    if not game_state["in_battle"]:
        return

    order = game_state["turn_order"]
    idx = game_state["current_turn"]

    if idx >= len(order):
        game_state["current_turn"] = 0
        idx = 0

    unit = order[idx]

    if isinstance(unit, Character) and not unit.is_alive():
        game_state["current_turn"] += 1
        next_turn(chat_id)
        return

    if isinstance(unit, Dragon):
        heroes_alive = [h for h in game_state["heroes"] if h.is_alive()]
        if heroes_alive:
            unit.choose_action(heroes_alive, chat_id)
            if check_end_game(chat_id):
                return
        game_state["current_turn"] += 1
        next_turn(chat_id)
    else:
        show_hero_skills(chat_id, unit)

    #  –º–∏–Ω–∏-–∫–∞—Ä—Ç—É
    draw_battle_map(chat_id)

def show_hero_skills(chat_id, hero):
    if isinstance(hero, HeroMag):
        keyboard = {"keyboard": [["üßô‚Äç‚ôÇÔ∏è –ú–∞–≥. –∞—Ç–∞–∫–∞", "üí• –°—É–ø–µ—Ä —É–¥–∞—Ä"],
                                 ["‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ", "üíû –õ–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"]],
                    "resize_keyboard": True}
    elif isinstance(hero, HeroTank):
        keyboard = {"keyboard": [["‚öî –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞", "üõ° –°—É–ø–µ—Ä —É–¥–∞—Ä —â–∏—Ç–æ–º"],
                                 ["üõ° –ë–∞—Ñ –∑–∞—â–∏—Ç—ã", "üéØ –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è (–∞–≥—Ä–æ)"]],
                    "resize_keyboard": True}
    elif isinstance(hero, HeroHunter):
        keyboard = {"keyboard": [["üèπ –£–¥–∞—Ä", "üî• –°—É–ø–µ—Ä —É–¥–∞—Ä"],
                                 ["‚ö° –ë–∞—Ñ —Å–∫–æ—Ä–æ—Å—Ç–∏", "üå™ –£–¥–∞—Ä –ø–æ –≤—Å–µ–º"]],
                    "resize_keyboard": True}
    send_message(chat_id, f"–•–æ–¥ –≥–µ—Ä–æ—è {hero.name}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)

def check_end_game(chat_id):
    dragon = game_state["dragon"]
    heroes = game_state["heroes"]
    if not dragon.is_alive():
        send_message(chat_id, "üéâ –ì–µ—Ä–æ–∏ –ø–æ–±–µ–¥–∏–ª–∏ –î—Ä–∞–∫–æ–Ω–∞!")
        game_state["in_battle"] = False
        return True
    if all(not h.is_alive() for h in heroes):
        send_message(chat_id, "‚ò†Ô∏è –í—Å–µ –≥–µ—Ä–æ–∏ –ø–∞–ª–∏. –î—Ä–∞–∫–æ–Ω –ø–æ–±–µ–¥–∏–ª!")
        game_state["in_battle"] = False
        return True
    return False

def handle_hero_action(chat_id, text):
    order = game_state["turn_order"]
    if not order:
        return  # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞

    idx = game_state["current_turn"]
    if idx >= len(order):
        game_state["current_turn"] = 0
        idx = 0

    hero = order[idx]
    dragon = game_state["dragon"]
    heroes = game_state["heroes"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–µ—Ä–æ–π –∂–∏–≤
    if not hero.is_alive():
        game_state["current_turn"] += 1
        next_turn(chat_id)
        return

    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞ –≥–µ—Ä–æ—è
    if isinstance(hero, HeroMag):
        if text == "üßô‚Äç‚ôÇÔ∏è –ú–∞–≥. –∞—Ç–∞–∫–∞":
            hero.skill_attack(dragon, chat_id)
        elif text == "üí• –°—É–ø–µ—Ä —É–¥–∞—Ä":
            hero.skill_super_attack(dragon, chat_id)
        elif text == "‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ":
            ally = random.choice([h for h in heroes if h.is_alive()])
            hero.skill_heal_one(ally, chat_id)
        elif text == "üíû –õ–µ—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã":
            hero.skill_heal_all([h for h in heroes if h.is_alive()], chat_id)
        else:
            send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!")
            return

    elif isinstance(hero, HeroTank):
        if text == "‚öî –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞":
            hero.skill_attack(dragon, chat_id)
        elif text == "üõ° –°—É–ø–µ—Ä —É–¥–∞—Ä —â–∏—Ç–æ–º":
            hero.skill_shield_bash(dragon, chat_id)
        elif text == "üõ° –ë–∞—Ñ –∑–∞—â–∏—Ç—ã":
            ally = random.choice([h for h in heroes if h.is_alive()])
            hero.skill_defense_buff(ally, chat_id)
        elif text == "üéØ –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è (–∞–≥—Ä–æ)":
            hero.skill_provoke(dragon, chat_id)
        else:
            send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!")
            return

    elif isinstance(hero, HeroHunter):
        if text == "üèπ –£–¥–∞—Ä":
            hero.skill_attack(dragon, chat_id)
        elif text == "üî• –°—É–ø–µ—Ä —É–¥–∞—Ä":
            hero.skill_super_shot(dragon, chat_id)
        elif text == "‚ö° –ë–∞—Ñ —Å–∫–æ—Ä–æ—Å—Ç–∏":
            ally = random.choice([h for h in heroes if h.is_alive()])
            hero.skill_speed_buff(ally, chat_id)
        elif text == "üå™ –£–¥–∞—Ä –ø–æ –≤—Å–µ–º":
            hero.skill_multi_shot([dragon], chat_id)
        else:
            send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –±–æ—è
    if check_end_game(chat_id):
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
    game_state["current_turn"] += 1
    next_turn(chat_id)

#  MAIN
while True:
    updates = get_updates()
    if "result" in updates:
        for upd in updates["result"]:
            offset = upd["update_id"] + 1
            if "message" in upd:
                chat_id = upd["message"]["chat"]["id"]
                text = upd["message"].get("text", "")
                if text == "/start":
                    show_main_menu(chat_id)
                else:
                    handle_hero_action(chat_id, text)
            elif "callback_query" in upd:
                data = upd["callback_query"]["data"]
                chat_id = upd["callback_query"]["message"]["chat"]["id"]
                if data == "start_game":
                    start_game(chat_id)
                elif data == "rules":
                    send_message(chat_id, "–ü—Ä–∞–≤–∏–ª–∞: –ø–æ–±–µ–¥–∏ –¥—Ä–∞–∫–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–∏–ª–ª—ã –≥–µ—Ä–æ–µ–≤.")
                elif data == "exit":
                    send_message(chat_id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")